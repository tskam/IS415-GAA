---
title: "Kernel Density Estimation"
date: "January 11, 2024"
date-modified: "last-modified"
format: html
execute:
  eval: true
  echo: true
  message: false
  warning: false
editor: visual
---

## Issue installing maptools

**maptools** is retired and binary is removed from CRAN.  However, we can download from [Posit Public Package Manager](https://packagemanager.posit.co/client/#/repos/cran/setup?snapshot=2023-10-13&distribution=windows&r_environment=ide) snapshots by using the code chunk below.

```{r}
#| eval: false
install.packages("maptools", repos = "https://packagemanager.posit.co/cran/2023-10-13")
```

After the installation is completed, it is important to edit the code chunk as shown below in order to avoid maptools being download and install repetitively every time the Quarto document been rendered. 

![](img/image1.jpg)

```{r}
#| echo: false
pacman::p_load(maptools, sf, raster, spatstat, tmap, tidyverse)
```

## Creating coastal outline

Although Coastal Outline geospatial data is not provided, we can derive it by using **MP14_SUBZONE_WEB_PL** shapefile, which is readily available in data.gtov.sg.

Firstly, you should download *MP14_SUBZONE_WEB_PL* from data.gov.sg.  Next, import the downloaded shapefile into R environment and call the sf tibble data.frame *mpsz_sf*.  

```{r}
#| echo: false
childcare_sf <- st_read("data/ChildCareServices.geojson") %>%
  st_transform(crs = 3414)
mpsz_sf <- st_read(dsn = "data", layer="MP14_SUBZONE_WEB_PL")
```

You can display *mpsz_sf* by using the code chunk below.

```{r}
plot(mpsz_sf)
```

In **sf** package, there are two functions allow us to combine multiple simple features into one simple features.  They are [`st_combine()`](https://r-spatial.github.io/sf/reference/geos_combine.html) and `st_union()`.  

`st_combine()` returns a single, combined geometry, with no resolved boundaries; returned geometries may well be invalid.

If y is missing, `st_union(x)` returns a single geometry with resolved boundaries, else the geometries for all unioned pairs of x[i] and y[j].

In the code chunk below, [`st_union()`]() is used to derive the coastal outline sf tibble data.frame.

```{r}
sg_sf <- mpsz_sf %>%
  st_union()
```

*sg_sf* will look similar to the figure below. 

```{r}
plot(sg_sf)
```

## Creating ppp objects: sf method

Instead of using the two steps approaches discussed in Hands-on Exercise 3 to create the **ppp** objects, in this section sf method will be shared.

### Creating point ppp objects

In the code chunk below, `as.ppp()` is used to derive an **ppp** object layer directly from a sf tibble data.frame.

```{r}
childcare_ppp <- as.ppp(childcare_sf)
```

Next, `summary()` can be used to reveal the properties of the newly created ppp objects.

```{r}
summary(childcare_ppp)
```

### Creating ***owin*** object: sf method

In the code chunk `as.owin()` is used to create an **owin** object class from polygon sf tibble data.frame.

```{r}
sg_owin <- as.owin(sg_sf)
```

Next, *summary()* function is used to display the summary information of the owin object class.

```{r eval=FALSE}
summary(sg_owin)
```

### Combining point events object and owin object

In this last step of geospatial data wrangling, we will extract childcare events that are located within Singapore by using the code chunk below.

```{r}
childcareSG_ppp = childcare_ppp[sg_owin]
```

The output object combined both the point and polygon feature in one ppp object class as shown below.

```{r}
summary(childcareSG_ppp)
```

### Extracting study area

Since the *mpsz_sf* is in sf tibble data.frame format, the code chunk below are not appropriate to be used to extract the planning areas.

```{r}
#| eval: false
pg = mpsz_sf[mpsz_sf@data$PLN_AREA_N == "PUNGGOL",]
tm = mpsz_sf[mpsz_sf@data$PLN_AREA_N == "TAMPINES",]
ck = mpsz_sf[mpsz_sf@data$PLN_AREA_N == "CHOA CHU KANG",]
jw = mpsz_sf[mpsz_sf@data$PLN_AREA_N == "JURONG WEST",]
```

On the other hand, `filter()` of dplyr package should be used to extract the target planning areas as shown in the code chunk below. 

```{r}
pg <- mpsz_sf %>%
  filter(PLN_AREA_N == "PUNGGOL")
tm <- mpsz_sf %>%
  filter(PLN_AREA_N == "TAMPINES")
ck <- mpsz_sf %>%
  filter(PLN_AREA_N == "CHOA CHU KANG")
jw <- mpsz_sf %>%
  filter(PLN_AREA_N == "JURONG WEST")
```



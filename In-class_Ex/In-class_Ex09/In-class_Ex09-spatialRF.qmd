---
title: "In-class Exercise 9: Geographically Weighted Predictive Modelling: SpatialRF methods"
execute: 
  eval: true
  echo: true
  message: false
  warning: false
  freeze: true
format: html
---

## Overview

In this in-class exercise, you will learn how to perform predictive modelling by using [spatialRF](https://blasbenito.github.io/spatialRF/index.html) package.

## Datasets

For the purpose of this in-class exercise, the following HDB 

## Install and Load R packages

```{r}
pacman::p_load(sf, tidyverse, tmap, 
               tidymodels, spatialRF)
```

## The Data

### Importing geospatial data

The geospatial data used in this hands-on exercise is called MP14_SUBZONE_WEB_PL. It is in ESRI shapefile format. The shapefile consists of URA Master Plan 2014's planning subzone boundaries. Polygon features are used to represent these geographic boundaries. The GIS data is in svy21 projected coordinates systems.

The code chunk below is used to import *MP_SUBZONE_WEB_PL* shapefile by using `st_read()` of **sf** packages.

```{r echo=TRUE, eval=TRUE}
mpsz = st_read(dsn = "data/geospatial", 
               layer = "MP14_SUBZONE_WEB_PL") %>%
  st_transform(3414)
```

### Importing HBD resale data

In this in-class exercise, HDB resale 2017 data set called *HDB_resale* will be used.  It is in *rds* format and is available in *rds* sub-folder of *In-class_Ex09*. 

::: {.panel-tabset}
## The task

Using appropriate tidyverse function to import HDB_resale.rds into R environment.  Name the output object *rs_tbl*.

## The code

```{r}
rs_sf = read_rds("data/rds/HDB_resale.rds")
```
:::

::: {.panel-tabset}
## The task

Using appropriate R function to check the object class of *rs_tbl*.

## The code

```{r}
class(rs_sf)
```
:::

## Data Sampling

Next, we will split *rs_sf* into training and test data sets with 65% and 35% respectively.

::: {.panel-tabset}

## The task

Using appropriate function of rsample package, derive the training and test data sets from *rs_sf*.  Called the output objects *train_data* and *test_data* respectively.

## The code

```{r}
set.seed(1234)
resale_split <- initial_split(rs_sf, 
                              prop = 5/10,)
train_data <- training(resale_split)
test_data <- testing(resale_split)
```
:::

## Preparing Coordinates Data

### Extracting coordinates data

::: {.panel-tabset}

## The task

Using appropriate sf fucntion, extract the x,y coordinates of the full, training and test data sets.

## The code

```{r}
coords <- st_coordinates(rs_sf)
coords_train <- st_coordinates(train_data)
coords_test <- st_coordinates(test_data)
```
:::

Before continue, we write all the output into rds for future used.

```{r}
coords_train <- write_rds(coords_train, "data/rds/coords_train.rds" )
coords_test <- write_rds(coords_test, "data/rds/coords_test.rds" )
```

14.9.2 Dropping geometry field

First, we will drop geometry column of the sf data.frame by using st_drop_geometry() of sf package.

train_data <- train_data %>% 
  st_drop_geometry()

## Geographically Weighted Predictive Model: spatialRF methods

### Computing distance matrix

```{r}
dm_train <- dist(coords_train)
dm_test <- dist(coords_test)
```

```{r}
train_dm <- as.matrix(dm_train) 
test_dm <- as.matrix(dm_test)
```

Write the data frame into rds for future use.

```{r}
write_rds(train_dm,
          "data/spatialRF/train_dm.rds")
write_rds(test_dm, 
          "data/spatialRF/test_dm.rds")
```

### Converting from sf object to data frame

::: {.panel-tabset}

## The task

Using appropriate sf and R functions to perform the following tasks:

- drop the geometry column from train_data and test_data, and
- convert both into data frame.

## The code

```{r}
train_df <- train_data %>%
  st_drop_geometry() %>%
  as.data.frame()

test_df <- test_data %>%
  st_drop_geometry() %>%
  as.data.frame()
```
:::



## Reading the modelling data sets

```{r}
dist_th <- c(0, 500, 1000, 1500, 2000, 2500, 3000)
```

```{r}
#| eval: false
mem <- mem(dist_mat)
```

```{r}
vif(train_df[,2:17])
```

```{r}
sum(apply(train_df, 2, is.na))
```

```{r}
apply(train_df, 2, var) == 0
```

```{r}
sum(apply(scale(train_df), 2, is.nan))
```

```{r}
sum(apply(scale(train_df), 2, is.infinite))
```


### Fitting a non-spatial random forest model

```{r}
rs_rf <- rf(
  data = train_df,
  dependent.variable.name = "RESALE_PRICE",
  predictor.variable.names = colnames(train_df)[2:17],
  distance.matrix = train_dm,
  distance.thresholds = dist_th,
  seed = 1234,
  n.cores = 16
  )
```

```{r}
write_rds(rs_rf, 
          "data/spatialRF/rs_rf.rds")
```

::: callout-warning
This is a very time-consuming process.
:::

```{r}
#| eval: false
plot_training_df_moran(
  data = condo_resale,
  dependent.variable.name = "SELLING_PRICE",
  predictor.variable.names = colnames(condo_resale)[5:23],
  distance.matrix = dist_mat,
  distance.thresholds = dist_th,
  point.color = "gray40"
)
```

### Retrieving RF results

```{r}
rs_rf <- read_rds("data/spatialRF/rs_rf.rds")
```

```{r}
plot_moran(rs_rf,
           verbose = FALSE)
```

### Calibrating Spatial Random Forest

```{r}
rs_sprf <- rf_spatial(
  data = train_df,
  dependent.variable.name = "RESALE_PRICE",
  predictor.variable.names = colnames(train_df)[2:17],
  distance.matrix = train_dm,
  distance.thresholds = 580,
  method = "hengl",
  n.cores = 16
  )
```

```{r}
write_rds(rs_sprf, "data/spatialRF/rs_sprf.rds")
```




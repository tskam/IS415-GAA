---
title: "R for Geospatial Data Sceince"
format: 
  html:
    code-fold: true
    code-summary: "Show the code"
execute: 
  eval: true
  echo: true
  warning: false
editor: visual
---

## Getting Started

::: callout-note
### DIY

Using the step you learned in previous lesson,

-   create a folder called In-class_Ex02.

-   create a new Quarto document called In-class_Ex02.
:::

In this hands-on exercise, the following R packages will be used.

-   arrow,
-   lubridate,
-   tidyverse,
-   tmap,
-   sf.

::: callout-note
### DIY

Write a code chunk to load the R packages into R environment.
:::

```{r}
pacman::p_load(arrow, lubridate, tidyverse, sf, tmap)
```

## Importing Grab-Posisi Dataset

::: callout-note
### DIY

-   Create a folder called *data* in *In-class_Ex02* folder.
-   Create a sub-folder called *GrabPosisi*.
-   Download, if you have yet to do so in previous lesson, Copy-and-Paste the downloaded data file into the newly created *GrabPosisi*.\
-   Write a code chunk to import *part-00000-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet* by using appropriate function of [**arrow**](https://arrow.apache.org/docs/r/index.html) package into R. Call the file *df*.
:::

```{r}
df <- read_parquet("data/GrabPosisi/part-00000.parquet")
```

```{r}
df_1 <- read_parquet("data/GrabPosisi/part-00000.parquet")
df_1$pingtimestamp <- as_datetime(df_1$pingtimestamp)
```

::: callout-note
### DIY

Write a code chunk to convert the data type of *pingtimestamp* from character to date-time.

```{r}
df$pingtimestamp <- as_datetime(df$pingtimestamp)
```
:::

::: callout-note
### DIY

Write a code chunk to save the reformatted df into a new rds file called *part0.rds*. Save the output into a sub-folder call *rds*.
:::

```{r}
write_rds(df, "data/rds/part0.rds")
```

### Extracting trip starting locations

::: callout-note
### DIY

Using the step you learned in previous lesson,

-   extracting trips' origin locations.
-   derive three new columns (i.e. variables) for weekday, starting hour and day of the month.
-   name the output tibble data.frame *origin_df*.
:::

```{r}
origin_df <- df %>%
  group_by(trj_id) %>%
  arrange(pingtimestamp) %>%
  filter(row_number()==1) %>%
  mutate(weekday = wday(pingtimestamp,
                        label=TRUE,
                        abbr=TRUE),
         start_hr = factor(hour(pingtimestamp)),
         day = factor(mday(pingtimestamp)))
```

### Extracting trip ending locations

::: callout-note
### DIY

Write a code chunk to extract trips' destination locations. Similarly, derive the weekday, ending hour and day of the month columns.
:::

```{r}
destination_df <- df %>%
  group_by(trj_id) %>%
  arrange(desc(pingtimestamp)) %>%
  filter(row_number()==1) %>%
  mutate(weekday = wday(pingtimestamp,
                        label=TRUE,
                        abbr=TRUE),
         end_hr = factor(hour(pingtimestamp)),
         day = factor(mday(pingtimestamp)))
```

### Visualising frequency distribution

```{r}
ggplot(data=origin_df, 
       aes(x=weekday)) + 
  geom_bar()
```

## Converting into sf tibble data.frame

```{r}
origin_sf <- st_as_sf(origin_df,
                      coords = c("rawlng", "rawlat"),
                      crs = 4326) %>%
  st_transform(crs = 3414)
```

## Visualising as Point Symbol Map

```{r}
tmap_mode("plot")
tm_shape(origin_sf) +
  tm_dots()
```

## Importing Master Plan 2019 Planning Subzone Boundary

::: callout-info
### DIY

Using the step your learned from previous lesson, import Master Plan 2019 Subzone downloaded from data.Gov as sf tibble data.frame. Call the output *mpsz2019*.
:::

```{r}
mpsz2019 <- st_read("data/dataGov/MPSZ2019.kml") %>%
  st_transform(crs = 3414)
```

::: callout-info
### DIY

Using the step your learned, plot a point symbol map look similar to the figure below.
:::

```{r}
tm_shape(mpsz2019) +
  tm_polygons() +
tm_shape(origin_sf) +
  tm_dots()
```

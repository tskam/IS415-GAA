{
  "hash": "cf3d5bd98b561b01b2a67480915c1ddd",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Kernel Density Estimation\"\ndate: \"January 11, 2024\"\ndate-modified: \"last-modified\"\nformat: html\nexecute:\n  eval: true\n  echo: true\n  message: false\n  warning: false\n  freeze: true\neditor: visual\n---\n\n\n## Issue installing maptools\n\n**maptools** is retired and binary is removed from CRAN. However, we can download from [Posit Public Package Manager](https://packagemanager.posit.co/client/#/repos/cran/setup?snapshot=2023-10-13&distribution=windows&r_environment=ide) snapshots by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"maptools\", repos = \"https://packagemanager.posit.co/cran/2023-10-13\")\n```\n:::\n\n\nAfter the installation is completed, it is important to edit the code chunk as shown below in order to avoid maptools being download and install repetitively every time the Quarto document been rendered.\n\n![](img/image1.jpg)\n\n\n::: {.cell}\n\n:::\n\n\n## Creating coastal outline\n\nAlthough Coastal Outline geospatial data is not provided, we can derive it by using **MP14_SUBZONE_WEB_PL** shapefile, which is readily available in data.gtov.sg.\n\nFirstly, you should download *MP14_SUBZONE_WEB_PL* from data.gov.sg. Next, import the downloaded shapefile into R environment and call the sf tibble data.frame *mpsz_sf*.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `ChildCareServices' from data source \n  `D:\\tskam\\IS415-GAA\\In-class_Ex\\In-class_Ex03\\data\\ChildCareServices.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1925 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\tskam\\IS415-GAA\\In-class_Ex\\In-class_Ex03\\data' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n\nYou can display *mpsz_sf* by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mpsz_sf)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex03-KDE_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nIn **sf** package, there are two functions allow us to combine multiple simple features into one simple features. They are [`st_combine()`](https://r-spatial.github.io/sf/reference/geos_combine.html) and `st_union()`.\n\n`st_combine()` returns a single, combined geometry, with no resolved boundaries; returned geometries may well be invalid.\n\nIf y is missing, `st_union(x)` returns a single geometry with resolved boundaries, else the geometries for all unioned pairs of x\\[i\\] and y\\[j\\].\n\nIn the code chunk below, [`st_union()`]() is used to derive the coastal outline sf tibble data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsg_sf <- mpsz_sf %>%\n  st_union()\n```\n:::\n\n\n*sg_sf* will look similar to the figure below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(sg_sf)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex03-KDE_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n## Creating ppp objects: sf method\n\nInstead of using the two steps approaches discussed in Hands-on Exercise 3 to create the **ppp** objects, in this section sf method will be shared.\n\n### Creating point ppp objects\n\nIn the code chunk below, `as.ppp()` is used to derive an **ppp** object layer directly from a sf tibble data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare_ppp <- as.ppp(childcare_sf)\n```\n:::\n\n\nNext, `summary()` can be used to reveal the properties of the newly created ppp objects.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(childcare_ppp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern:  1925 points\nAverage intensity 2.417323e-06 points per square unit\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nmarks are of type 'character'\nSummary:\n   Length     Class      Mode \n     1925 character character \n\nWindow: rectangle = [11810.03, 45404.24] x [25596.33, 49300.88] units\n                    (33590 x 23700 units)\nWindow area = 796335000 square units\n```\n\n\n:::\n:::\n\n\n### Creating ***owin*** object: sf method\n\nIn the code chunk `as.owin()` is used to create an **owin** object class from polygon sf tibble data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsg_owin <- as.owin(sg_sf)\n```\n:::\n\n\nNext, *summary()* function is used to display the summary information of the owin object class.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(sg_owin)\n```\n:::\n\n\n### Combining point events object and owin object\n\nIn this last step of geospatial data wrangling, we will extract childcare events that are located within Singapore by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcareSG_ppp = childcare_ppp[sg_owin]\n```\n:::\n\n\nThe output object combined both the point and polygon feature in one ppp object class as shown below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(childcareSG_ppp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern:  1925 points\nAverage intensity 2.461811e-06 points per square unit\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nmarks are of type 'character'\nSummary:\n   Length     Class      Mode \n     1925 character character \n\nWindow: polygonal boundary\n80 separate polygons (35 holes)\n                  vertices         area relative.area\npolygon 1            14650  6.97996e+08      8.93e-01\npolygon 2 (hole)         3 -2.21090e+00     -2.83e-09\npolygon 3              285  1.61128e+06      2.06e-03\npolygon 4 (hole)         3 -2.05920e-03     -2.63e-12\npolygon 5 (hole)         3 -8.83647e-03     -1.13e-11\npolygon 6              668  5.40368e+07      6.91e-02\npolygon 7               44  2.26577e+03      2.90e-06\npolygon 8               27  1.50315e+04      1.92e-05\npolygon 9              711  1.28815e+07      1.65e-02\npolygon 10 (hole)       36 -4.01660e+04     -5.14e-05\npolygon 11 (hole)      317 -5.11280e+04     -6.54e-05\npolygon 12 (hole)        3 -3.41405e-01     -4.37e-10\npolygon 13 (hole)        3 -2.89050e-05     -3.70e-14\npolygon 14              77  3.29939e+05      4.22e-04\npolygon 15              30  2.80002e+04      3.58e-05\npolygon 16 (hole)        3 -2.83151e-01     -3.62e-10\npolygon 17              71  8.18750e+03      1.05e-05\npolygon 18 (hole)        3 -1.68316e-04     -2.15e-13\npolygon 19 (hole)       36 -7.79904e+03     -9.97e-06\npolygon 20 (hole)        4 -2.05611e-02     -2.63e-11\npolygon 21 (hole)        3 -2.18000e-06     -2.79e-15\npolygon 22 (hole)        3 -3.65501e-03     -4.67e-12\npolygon 23 (hole)        3 -4.95057e-02     -6.33e-11\npolygon 24 (hole)        3 -3.99521e-02     -5.11e-11\npolygon 25 (hole)        3 -6.62377e-01     -8.47e-10\npolygon 26 (hole)        3 -2.09065e-03     -2.67e-12\npolygon 27              91  1.49663e+04      1.91e-05\npolygon 28 (hole)       26 -1.25665e+03     -1.61e-06\npolygon 29 (hole)      349 -1.21433e+03     -1.55e-06\npolygon 30 (hole)       20 -4.39069e+00     -5.62e-09\npolygon 31 (hole)       48 -1.38338e+02     -1.77e-07\npolygon 32 (hole)       28 -1.99862e+01     -2.56e-08\npolygon 33              40  1.38607e+04      1.77e-05\npolygon 34 (hole)       40 -6.00381e+03     -7.68e-06\npolygon 35 (hole)        7 -1.40545e-01     -1.80e-10\npolygon 36 (hole)       12 -8.36709e+01     -1.07e-07\npolygon 37              45  2.51218e+03      3.21e-06\npolygon 38             142  3.22293e+03      4.12e-06\npolygon 39             148  3.10395e+03      3.97e-06\npolygon 40              75  1.73526e+04      2.22e-05\npolygon 41              83  5.28920e+03      6.76e-06\npolygon 42             211  4.70521e+05      6.02e-04\npolygon 43             106  3.04104e+03      3.89e-06\npolygon 44             266  1.50631e+06      1.93e-03\npolygon 45              71  5.63061e+03      7.20e-06\npolygon 46              10  1.99717e+02      2.55e-07\npolygon 47             478  2.06120e+06      2.64e-03\npolygon 48             155  2.67502e+05      3.42e-04\npolygon 49            1027  1.27782e+06      1.63e-03\npolygon 50 (hole)        3 -1.16959e-03     -1.50e-12\npolygon 51              65  8.42861e+04      1.08e-04\npolygon 52              47  3.82087e+04      4.89e-05\npolygon 53               6  4.50259e+02      5.76e-07\npolygon 54             132  9.53357e+04      1.22e-04\npolygon 55 (hole)        3 -3.23310e-04     -4.13e-13\npolygon 56               4  2.69313e+02      3.44e-07\npolygon 57 (hole)        3 -1.46474e-03     -1.87e-12\npolygon 58            1045  4.44510e+06      5.68e-03\npolygon 59              22  6.74651e+03      8.63e-06\npolygon 60              64  3.43149e+04      4.39e-05\npolygon 61 (hole)        3 -1.98390e-03     -2.54e-12\npolygon 62 (hole)        4 -1.13774e-02     -1.46e-11\npolygon 63              14  5.86546e+03      7.50e-06\npolygon 64              95  5.96187e+04      7.62e-05\npolygon 65 (hole)        4 -1.86410e-02     -2.38e-11\npolygon 66 (hole)        3 -5.12482e-03     -6.55e-12\npolygon 67 (hole)        3 -1.96410e-03     -2.51e-12\npolygon 68 (hole)        3 -5.55856e-03     -7.11e-12\npolygon 69             234  2.08755e+06      2.67e-03\npolygon 70              10  4.90942e+02      6.28e-07\npolygon 71             234  4.72886e+05      6.05e-04\npolygon 72 (hole)       13 -3.91907e+02     -5.01e-07\npolygon 73              15  4.03300e+04      5.16e-05\npolygon 74             227  1.10308e+06      1.41e-03\npolygon 75              10  6.60195e+03      8.44e-06\npolygon 76              19  3.09221e+04      3.95e-05\npolygon 77             145  9.61782e+05      1.23e-03\npolygon 78              30  4.28933e+03      5.49e-06\npolygon 79              37  1.29481e+04      1.66e-05\npolygon 80               4  9.47108e+01      1.21e-07\nenclosing rectangle: [2667.54, 56396.44] x [15748.72, 50256.33] units\n                     (53730 x 34510 units)\nWindow area = 781945000 square units\nFraction of frame area: 0.422\n```\n\n\n:::\n:::\n\n\n### Extracting study area\n\nSince the *mpsz_sf* is in sf tibble data.frame format, the code chunk below are not appropriate to be used to extract the planning areas.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npg = mpsz_sf[mpsz_sf@data$PLN_AREA_N == \"PUNGGOL\",]\ntm = mpsz_sf[mpsz_sf@data$PLN_AREA_N == \"TAMPINES\",]\nck = mpsz_sf[mpsz_sf@data$PLN_AREA_N == \"CHOA CHU KANG\",]\njw = mpsz_sf[mpsz_sf@data$PLN_AREA_N == \"JURONG WEST\",]\n```\n:::\n\n\nOn the other hand, `filter()` of dplyr package should be used to extract the target planning areas as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npg <- mpsz_sf %>%\n  filter(PLN_AREA_N == \"PUNGGOL\")\ntm <- mpsz_sf %>%\n  filter(PLN_AREA_N == \"TAMPINES\")\nck <- mpsz_sf %>%\n  filter(PLN_AREA_N == \"CHOA CHU KANG\")\njw <- mpsz_sf %>%\n  filter(PLN_AREA_N == \"JURONG WEST\")\n```\n:::\n",
    "supporting": [
      "In-class_Ex03-KDE_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}